		     +--------------------------+
         | CS 140	                  |
		     | PROJECT 2: USER PROGRAMS	|
		     | DESIGN DOCUMENT        	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.
Group 7
Han Lin <linhan@shanghaitech.edu.cn>
Daqian Wu <linhan@shanghaitech.edu.cn>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct thread:
    struct file * self_elf;
    struct thread* parent;               /* parent thread */
    struct semaphore load_wait;          /* semaphore for sync load success */
    bool load_status;                    /* true if load success*/

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Use "strtok_r" function to parse the initial arguments by spaces, and each token obtained from "strtok_r" is pushed into stack frame and pushed into argv list in order, i.e. the first argument from left to right is stored in argv[0], the second argument is in argv[1]. 
The top of stack is at PHYS_BASE, which is also where kernel virtual memory starts. And before the processor pushes data on the stack, it decrements the stack pointer. T

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
The strtok() function uses a static buffer while parsing, so it's  not thread safe.  
>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
Add to "struct thread":
    int open_file_num;                 /* the number of open files */
    struct list open_file_list;        /* the list of open files */
    int max_fd;                        /* current max fd */ 
    int ret_status;                    /* thread return status */
    int child_alive_num;               /* number of child still alive */
    struct list child_ret_list;        /* the list of child thread's return value */ 
    struct semaphore sema_wait;        /* semaphore for children wait */
    bool is_wait;                      /* true if the thread is waited by parent thread */
    bool save_ret;                     /* true if thread saved return value to parent thread */

A "file_node" is a new struct. Represent a file as a node which can be an element of the open_file_list of threads. Each time we create a file, it would generate a corresponding file_node and pushed into a open_file_list.
    struct file_node{
        int fd;                   /* file descriptor */
        struct list_elem elem;    /* represent a file in open_file_list */
        struct file* f;           /* the actual file */
    };

"int max_files = 200" is added as a global variable in syscall.c, which is to limit the number of files a thread can open in total.
    int max_files = 200;

A "ret_data" is a new struct. Represent a return data from a thread as a struct of "ret_data" which can store the thread id, actual returned value and element 
    struct ret_data{
        int tid;
        int ret;
        struct list_elem elem;
    };

"file_lock" is added as a global variable defined in thread.h, which is specially used to guarantee that each time only one thread can run filesys functions.
    struct lock file_lock;

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
Each open file has a file descriptor in the form of integer numbers, and the file_node associates a file with its file descriptor. In our design, the file descriptor is denoted by the number of times the current thread has open files. The file descriptors are unique within a single process.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
    First, we read the data of fd, buffer pointer, size from stack by moving the esp pointer, which is done for both of reading and writing.
    Reading: 
    If fd = 0, then we just read size bytes from keyboard using input_getc() and put these size bytes into buffer, and return the size of bytes we actually read. If fd > 0, we first find the file through file descriptor by file_find() function, and run the syscall function file_read(), and return the read_bytes. If we cannot find the file, return -1.
    Writing:
    If fd = 1, then we just write size bytes from buffer into the console and return the actual written byte size. If fd != 1, if we can find the file by fild_find() function then just return the result of syscall function file_write(),else if we cannot find it, just return 0.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?



>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

the wait system call process_wait upon valid tid, and waits for the child to finish. The interation is done through a sema for that is 0 initially and down by parent and up by the last child.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

In each syscall handler, we check the stack pointer against the physical base and make sure the stack pointer is valid. If any of the stack value is suppose to be a pointer, the we should check the dereference address in the stack to see if the address is a valid user address. For example, `int open (const char *file)`, we first check `!is_user_vaddr(f->esp+4)` and then since this value is a pointer we have to check again `!is_user_vaddr((*(int*)(f->esp+4)))`. All resouses are freed at process_exit and local variable are freed upon invalid or valid return.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We added `bool load_status` and `struct semaphore load_wait`. Before process_exec decides to return the tid, which is always valid at first, it downs the load_wait semaphore and therefore pause to wait. The load_wait semaphore is only uped once load is completed at start_process, load_status is the value of the success of load. Once process_exec is not waiting it checks load_status to decide what to return.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
Since the knowledge about userprogram hasn't been introduced in the lectures, we have a hard time to get farmiliar with the logical process of userprogram in this project. 
>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
The syscall part gave us clear insight about how user function transformed into kernel function and how data stored in stack is taken into the function parameters.
>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?